package thread.synchronization;

/*
 * In object level the thread put lock on the object it is accessing, so remaining thread cannot access all the Non-static 
 * Synchronized method but can access
 *       - Static synchronized method 
 *       - static method
 *       - Non-synchronized instance method
 * 
 * In Class level the thread put lock on the class while it's accessing the synchronized static method, so the remaining thread
 * cannot access all the synchronized static method until it's lock has been released, but can access,
 * 		- Non-synchronized static method
 * 		- synchronized instance method
 * 		- Non-synchronized instance method  
 */

public class Static_SynchronizationMethod {

	public static void main(String[] args) {
		MyThread1 t1 = new MyThread1();
		MyThread1 t2 = new MyThread1();
		t1.start();
		t2.start();
	}
}

class Main{
	
	static synchronized void display() throws InterruptedException {
		for(int i = 1 ; i<= 10 ; i++) {
			System.out.println("Display : "+i);
			Thread.sleep(1000);
		}
	}
	
	static synchronized void print() throws InterruptedException {
		for(int i = 1 ; i<= 10 ; i++) {
			System.out.println("Print : "+i);
			Thread.sleep(1000);
		}
	}
	
	static void displayStatic() throws InterruptedException {
		for(int i = 1 ; i<= 10 ; i++) {
			System.out.println("DisplayStatic : "+i);
			Thread.sleep(1000);
		}
	}
}

class MyThread1 extends Thread{
	public void run() {
		try {
			Main.print();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}
